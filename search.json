[
  {
    "objectID": "vignettes/walk_through.html",
    "href": "vignettes/walk_through.html",
    "title": "Walk through",
    "section": "",
    "text": "Tabset is an interactive panel in Quarto html documents.\n\nAB\n\n\nTab content for A\n\n\nTab content for B\n\n\n\nThis was written as follows.\n::: {.panel-tabset}\n## A\n\nTab content for A\n\n## B\n\nTab content for B\n:::\nIt would be tedious to manually rewrite this each time the number of tabs increases or decreases. The quartabs::render_tabset() takes a data frame as input and outputs it dynamically. Note that the chunk option must be results: asis.\n```{r}\n#| results: asis\n\ndata.frame(\n  tab = c(\"A\", \"B\"),\n  value = c(\"Tab content for A\", \"Tab content for B\")\n) |&gt;\n  quartabs::render_tabset(tab, value)\n```\n\nAB\n\n\nTab content for A\n\n\nTab content for B",
    "crumbs": [
      "Articles",
      "Walk through"
    ]
  },
  {
    "objectID": "vignettes/walk_through.html#introduction",
    "href": "vignettes/walk_through.html#introduction",
    "title": "Walk through",
    "section": "",
    "text": "Tabset is an interactive panel in Quarto html documents.\n\nAB\n\n\nTab content for A\n\n\nTab content for B\n\n\n\nThis was written as follows.\n::: {.panel-tabset}\n## A\n\nTab content for A\n\n## B\n\nTab content for B\n:::\nIt would be tedious to manually rewrite this each time the number of tabs increases or decreases. The quartabs::render_tabset() takes a data frame as input and outputs it dynamically. Note that the chunk option must be results: asis.\n```{r}\n#| results: asis\n\ndata.frame(\n  tab = c(\"A\", \"B\"),\n  value = c(\"Tab content for A\", \"Tab content for B\")\n) |&gt;\n  quartabs::render_tabset(tab, value)\n```\n\nAB\n\n\nTab content for A\n\n\nTab content for B",
    "crumbs": [
      "Articles",
      "Walk through"
    ]
  },
  {
    "objectID": "vignettes/walk_through.html#basic-usage",
    "href": "vignettes/walk_through.html#basic-usage",
    "title": "Walk through",
    "section": "Basic usage",
    "text": "Basic usage\nHere are basic examples. First, load the libraries used in this demo and create sample data.\n\nlibrary(quartabs)\nlibrary(tibble)\nlibrary(dplyr)\nlibrary(purrr)\nlibrary(tidyr)\nlibrary(knitr)\nlibrary(gt)\nlibrary(DT)\nlibrary(reactable)\nlibrary(flextable)\nlibrary(plotly)\nlibrary(leaflet)\nlibrary(htmltools)\nlibrary(tinytable)\n\nset.seed(123)\n\n# sample data\ndf1 &lt;- tibble(\n  id = paste0(\"id\", 1:6),\n  group1 = c(rep(\"A\", 3), rep(\"B\", 3)),\n  group2 = rep(c(\"X\", \"Y\", \"Z\"), 2),\n  var1 = 1:6,\n  var2 = list(1, 2, 3, 4, 5, 6),\n  var3 = factor(letters[1:6])\n)\n\ndf1\n\n# A tibble: 6 × 6\n  id    group1 group2  var1 var2      var3 \n  &lt;chr&gt; &lt;chr&gt;  &lt;chr&gt;  &lt;int&gt; &lt;list&gt;    &lt;fct&gt;\n1 id1   A      X          1 &lt;dbl [1]&gt; a    \n2 id2   A      Y          2 &lt;dbl [1]&gt; b    \n3 id3   A      Z          3 &lt;dbl [1]&gt; c    \n4 id4   B      X          4 &lt;dbl [1]&gt; d    \n5 id5   B      Y          5 &lt;dbl [1]&gt; e    \n6 id6   B      Z          6 &lt;dbl [1]&gt; f    \n\n\n\nresults: asis\n\n\n\n\n\n\nDon’t forget!\n\n\n\nWrite #| results: asis at the beginning of the chunk.\n\n\n```{r}\n#| results: asis\n\ndf1 |&gt;\n  render_tabset(id, var1)\n```\n\nid1id2id3id4id5id6\n\n\n1\n\n\n2\n\n\n3\n\n\n4\n\n\n5\n\n\n6\n\n\n\nThis is equal to the following.\n```{r, results='asis'}\ndf1 |&gt;\n  render_tabset(id, var1)\n```\n\nid1id2id3id4id5id6\n\n\n1\n\n\n2\n\n\n3\n\n\n4\n\n\n5\n\n\n6\n\n\n\nTo avoid repetition, the default chunk option can be changed.\nknitr::opts_chunk$set(\n  results = \"asis\"\n)\n\n\ntabset_vars, output_vars\nThe first argument is tabset_vars, which specifies the column names to be displayed in the tab; the second argument is output_vars, which specifies the columns to be displayed in the tab.\nMultiple tabset_vars and output_vars are acceptable. For multiple tabset_vars, they are displayed nested.\n```{r}\n#| results: asis\n\ndf1 |&gt;\n  render_tabset(c(group1, group2), c(var1, var2, var3))\n```\n\nAB\n\n\n\nXYZ\n\n\n1\n[1] 1\na\n\n\n2\n[1] 2\nb\n\n\n3\n[1] 3\nc\n\n\n\n\n\n\nXYZ\n\n\n4\n[1] 4\nd\n\n\n5\n[1] 5\ne\n\n\n6\n[1] 6\nf\n\n\n\n\n\n\n\n\n\n\n\n\ncat() or print()\n\n\n\ncat() is used internally for non-list columns to avoid unnecessary prefixes such as “[1]” in the output. On the other hand, print() is used for list columns.\nFor example, var1 displays “1”, while var2 of type list displays “[1] 1”.\n\n\n\n\nFactor, Date, POSIXt display\nIn render_tabset(), cat() is used to output for columns that are not list types. However, if cat() is used, factor, Date, POSIXt are output as an integer. So, if these are included in tabset_vars or output_vars, it is converted internally to string.\nDefine test objects.\n\n(test_factor &lt;- factor(\"a\"))\n\n[1] a\nLevels: a\n\n(test_date &lt;- as.Date(\"2025-01-01\"))\n\n[1] \"2025-01-01\"\n\n(test_posixct &lt;- as.POSIXct(\"2025-01-01 12:34:56\", tz = \"UTC\"))\n\n[1] \"2025-01-01 12:34:56 UTC\"\n\n\nUsing cat() results in output as a number. This is not usually the expected output.\n\ncat(test_factor)\n\n1\n\ncat(test_date)\n\n20089\n\ncat(test_posixct)\n\n1735734896\n\n\nTherefore, render_tabset() uses cat() after converting it internally to a string as follows.\n\ncat(as.character(test_factor))\n\na\n\ncat(as.character(test_date))\n\n2025-01-01\n\ncat(as.character(test_posixct))\n\n2025-01-01 12:34:56\n\n\n\n\nlayout\nHow can I display the content in a tabset horizontally? In Quarto, layout-ncol can be used.\n```{r}\n#| results: asis\n#| layout-ncol: 3\n\ndf1 |&gt;\n  render_tabset(c(group1, group2), c(var1, var2, var3))\n```\n\n\n\n\nAB\n\n\n\nXYZ\n\n\n1\n[1] 1\na\n\n\n2\n[1] 2\nb\n\n\n3\n[1] 3\nc\n\n\n\n\n\n\nXYZ\n\n\n4\n[1] 4\nd\n\n\n5\n[1] 5\ne\n\n\n6\n[1] 6\nf\n\n\n\n\n\n\n\n\n\nOops, the entire tabset is now a third of the width. We want the content within to be displayed side by side without changing the width of the tabset. This is where the layout argument comes in handy.\n```{r}\n#| results: asis\n\ndf1 |&gt;\n  render_tabset(\n    c(group1, group2),\n    c(var1, var2, var3),\n    layout = \"::: {layout-ncol=3}\"\n  )\n```\n\nAB\n\n\n\nXYZ\n\n\n\n\n\n\n\n\n1\n\n\n[1] 1\n\n\na\n\n\n\n\n\n\n\n\n\n\n\n2\n\n\n[1] 2\n\n\nb\n\n\n\n\n\n\n\n\n\n\n\n3\n\n\n[1] 3\n\n\nc\n\n\n\n\n\n\n\n\n\nXYZ\n\n\n\n\n\n\n\n\n4\n\n\n[1] 4\n\n\nd\n\n\n\n\n\n\n\n\n\n\n\n5\n\n\n[1] 5\n\n\ne\n\n\n\n\n\n\n\n\n\n\n\n6\n\n\n[1] 6\n\n\nf\n\n\n\n\n\n\n\n\n\nFor more information about layout, see Custom Layouts.\n\n\n\n\n\n\nWarning\n\n\n\n\nIn narrower displays, such as on smartphones, the layout may not appear to work.\nThe layout argument is intended for very simple use cases, so complex layouts may not work.\n\n\n\n\n\nheading_levels\nUse the heading_levels argument if you want the heading to be displayed as normal headings instead of tabsets. heading_levels and tabset_vars correspond in order. Each tabset_vars is expressed as the heading of specified in heading_levels. If the element of heading_levels is NA, then the element of its tabset_vars is represented as tabset.\n\nExample 1\nFor example, group1 should be tabset and group2 should be h4 heading.\n```{r}\n#| results: asis\n\ndf1 |&gt;\n  render_tabset(\n    c(group1, group2),\n    c(var1, var2, var3),\n    heading_levels = c(NA, 4)\n  )\n```\n\nAB\n\n\n\nX\n1\n[1] 1\na\n\n\nY\n2\n[1] 2\nb\n\n\nZ\n3\n[1] 3\nc\n\n\n\n\nX\n4\n[1] 4\nd\n\n\nY\n5\n[1] 5\ne\n\n\nZ\n6\n[1] 6\nf\n\n\n\n\n\n\nExample 2\nConversely, group1 should be heading 4 and group2 should be tabset.\n```{r}\n#| results: asis\n\ndf1 |&gt;\n  render_tabset(\n    c(group1, group2),\n    c(var1, var2, var3),\n    heading_levels = c(4, NA)\n  )\n```\n\n\nA\n\nXYZ\n\n\n1\n[1] 1\na\n\n\n2\n[1] 2\nb\n\n\n3\n[1] 3\nc\n\n\n\n\n\nB\n\nXYZ\n\n\n4\n[1] 4\nd\n\n\n5\n[1] 5\ne\n\n\n6\n[1] 6\nf\n\n\n\n\n\nExample 3\nSet group1 to heading 4 and group2 to heading 5 (no tabset).\ndf1 |&gt;\n  render_tabset(\n    c(group1, group2),\n    c(var1, var2, var3),\n    heading_levels = c(4, 5)\n  )\n\n\nA\n\nX\n1\n[1] 1\na\n\n\nY\n2\n[1] 2\nb\n\n\nZ\n3\n[1] 3\nc\n\n\n\nB\n\nX\n4\n[1] 4\nd\n\n\nY\n5\n[1] 5\ne\n\n\nZ\n6\n[1] 6\nf\n\n\n\n\npills\nAs of 2025-03-05, the latest version of Quarto is 1.6, but [the Bootstrap version used appears to be Bootstrap 5.2.2, which was introduced with Quarto 1.4].(https://quarto.org/docs/download/changelog/1.4/#:~:text=for%20HTML%20output-,(%235210)%3A%20Update%20to%20Bootstrap%205.2.2,-(%235393)%3A%20Properly)\nSeveral tab customisations are available in Bootstrap 5.2. One of these is pills.\n```{r}\n#| results: asis\n\ndf1 |&gt;\n  render_tabset(\n    c(group1, group2),\n    c(var1, var2, var3),\n    pills = TRUE\n  )\n```\n\nAB\n\n\n\nXYZ\n\n\n1\n[1] 1\na\n\n\n2\n[1] 2\nb\n\n\n3\n[1] 3\nc\n\n\n\n\n\n\nXYZ\n\n\n4\n[1] 4\nd\n\n\n5\n[1] 5\ne\n\n\n6\n[1] 6\nf\n\n\n\n\n\n\n\n\ntabset_width\nSimilarly, you can choose from three fill and justify. In the following, long labels are created for the sake of example and displayed at half width.\n“default”\n```{r}\n#| results: asis\n#| layout-ncol: 2\n\ndf1_long_label &lt;- df1 |&gt;\n  mutate(\n    group1 = paste(\"This is a long label for\", group1)\n  )\n\ndf1_long_label |&gt;\n  render_tabset(\n    c(group1, group2),\n    c(var1, var2, var3),\n    tabset_width = \"default\"\n  )\n```\n\n\n\n\nThis is a long label for AThis is a long label for B\n\n\n\nXYZ\n\n\n1\n[1] 1\na\n\n\n2\n[1] 2\nb\n\n\n3\n[1] 3\nc\n\n\n\n\n\n\nXYZ\n\n\n4\n[1] 4\nd\n\n\n5\n[1] 5\ne\n\n\n6\n[1] 6\nf\n\n\n\n\n\n\n\n\n\n“fill”\n```{r}\n#| results: asis\n#| layout-ncol: 2\n\ndf1_long_label |&gt;\n  render_tabset(\n    c(group1, group2),\n    c(var1, var2, var3),\n    tabset_width = \"fill\"\n  )\n```\n\n\n\n\nThis is a long label for AThis is a long label for B\n\n\n\nXYZ\n\n\n1\n[1] 1\na\n\n\n2\n[1] 2\nb\n\n\n3\n[1] 3\nc\n\n\n\n\n\n\nXYZ\n\n\n4\n[1] 4\nd\n\n\n5\n[1] 5\ne\n\n\n6\n[1] 6\nf\n\n\n\n\n\n\n\n\n\n“justified”\n```{r}\n#| results: asis\n#| layout-ncol: 2\n\ndf1_long_label |&gt;\n  render_tabset(\n    c(group1, group2),\n    c(var1, var2, var3),\n    tabset_width = \"justified\"\n  )\n```\n\n\n\n\nThis is a long label for AThis is a long label for B\n\n\n\nXYZ\n\n\n1\n[1] 1\na\n\n\n2\n[1] 2\nb\n\n\n3\n[1] 3\nc\n\n\n\n\n\n\nXYZ\n\n\n4\n[1] 4\nd\n\n\n5\n[1] 5\ne\n\n\n6\n[1] 6\nf",
    "crumbs": [
      "Articles",
      "Walk through"
    ]
  },
  {
    "objectID": "vignettes/walk_through.html#figures-and-tables",
    "href": "vignettes/walk_through.html#figures-and-tables",
    "title": "Walk through",
    "section": "Figures and tables",
    "text": "Figures and tables\nThis section shows more practical examples. Use the mtcars dataset, grouped by cyl and am, to create figures and tables showing the relationship between wt and mpg. render_tabset() was originally created to represent figures and tables as tabsets, with nested data frames as input. Nesting approach is useful when the same operation is performed on each group.\n\nnest() + map()\nWe shows how to use tidyr::nest() and purrr::map() combination.\nFor more information on the nest, see follows:\n\nNested data\n23 Model basics\n\nJapanese\n\nTokyoR #108 Nested Data Handling\nnested data で ggplot\n\n\n# new sample data\ndf2 &lt;- mtcars |&gt;\n  # make groups more explicit\n  mutate(\n    cyl = paste(\"cyl:\", cyl),\n    am = paste(\"am:\", am)\n  ) |&gt;\n  # nest\n  nest(.by = c(cyl, am)) |&gt;\n  mutate(\n    # create titles for figures\n    title = paste(cyl, am, sep = \", \"),\n    # create scatter plots\n    fig = map2(\n      data,\n      title,\n      \\(data, title) {\n        data |&gt;\n          ggplot(aes(wt, mpg)) +\n          geom_point() +\n          labs(title = title)\n      }\n    ),\n    # create tables\n    tbl = map(\n      data,\n      \\(data) {\n        data |&gt;\n          select(wt, mpg) |&gt;\n          knitr::kable()\n      }\n    )\n  )\n\ndf2\n\n# A tibble: 6 × 6\n  cyl    am    data              title         fig    tbl            \n  &lt;chr&gt;  &lt;chr&gt; &lt;list&gt;            &lt;chr&gt;         &lt;list&gt; &lt;list&gt;         \n1 cyl: 6 am: 1 &lt;tibble [3 × 9]&gt;  cyl: 6, am: 1 &lt;gg&gt;   &lt;kntr_kbl [5]&gt; \n2 cyl: 4 am: 1 &lt;tibble [8 × 9]&gt;  cyl: 4, am: 1 &lt;gg&gt;   &lt;kntr_kbl [10]&gt;\n3 cyl: 6 am: 0 &lt;tibble [4 × 9]&gt;  cyl: 6, am: 0 &lt;gg&gt;   &lt;kntr_kbl [6]&gt; \n4 cyl: 8 am: 0 &lt;tibble [12 × 9]&gt; cyl: 8, am: 0 &lt;gg&gt;   &lt;kntr_kbl [14]&gt;\n5 cyl: 4 am: 0 &lt;tibble [3 × 9]&gt;  cyl: 4, am: 0 &lt;gg&gt;   &lt;kntr_kbl [5]&gt; \n6 cyl: 8 am: 1 &lt;tibble [2 × 9]&gt;  cyl: 8, am: 1 &lt;gg&gt;   &lt;kntr_kbl [4]&gt; \n\n\nFigures and tables have been created for the fig and tbl columns respectively. Also note that the group variables cly and am are not ordered in regular ascending order. They are arranged in order of appearance. In Next step, specifying cly and am in tabset_vars in render_tabset() automatically executes arrange(cly, am) internally. So don’t worry.\n\n\n\n\n\n\nTip\n\n\n\nWe did not run arrange(cly, am) in this example for the sake of example, but in practice it is better to run arrange(cly, am) in the pipeline to make it easier to identify each group.\n\ndf2 |&gt;\n  arrange(cyl, am)\n\n# A tibble: 6 × 6\n  cyl    am    data              title         fig    tbl            \n  &lt;chr&gt;  &lt;chr&gt; &lt;list&gt;            &lt;chr&gt;         &lt;list&gt; &lt;list&gt;         \n1 cyl: 4 am: 0 &lt;tibble [3 × 9]&gt;  cyl: 4, am: 0 &lt;gg&gt;   &lt;kntr_kbl [5]&gt; \n2 cyl: 4 am: 1 &lt;tibble [8 × 9]&gt;  cyl: 4, am: 1 &lt;gg&gt;   &lt;kntr_kbl [10]&gt;\n3 cyl: 6 am: 0 &lt;tibble [4 × 9]&gt;  cyl: 6, am: 0 &lt;gg&gt;   &lt;kntr_kbl [6]&gt; \n4 cyl: 6 am: 1 &lt;tibble [3 × 9]&gt;  cyl: 6, am: 1 &lt;gg&gt;   &lt;kntr_kbl [5]&gt; \n5 cyl: 8 am: 0 &lt;tibble [12 × 9]&gt; cyl: 8, am: 0 &lt;gg&gt;   &lt;kntr_kbl [14]&gt;\n6 cyl: 8 am: 1 &lt;tibble [2 × 9]&gt;  cyl: 8, am: 1 &lt;gg&gt;   &lt;kntr_kbl [4]&gt; \n\n\n\n\n\n\nnest_by() + list()\nAnother method is to use dplyr::nest_by() and list(). This approach is simpler and more intuitive to write.\nFor more information, see follows:\n\nRow-wise operations\n\n\ndf2_rowwise &lt;- mtcars |&gt;\n  # make groups more explicit\n  mutate(\n    cyl = paste(\"cyl:\", cyl),\n    am = paste(\"am:\", am)\n  ) |&gt;\n  # nest\n  nest_by(cyl, am) |&gt;\n  mutate(\n    # create titles for figures\n    title = paste(cyl, am, sep = \", \"),\n    # create scatter plots\n    fig = list(\n      data |&gt;\n        ggplot(aes(wt, mpg)) +\n        geom_point() +\n        labs(title = title)\n    ),\n    # create tables\n    tbl = list(\n      data |&gt;\n        select(wt, mpg) |&gt;\n        knitr::kable()\n    )\n  )\n\ndf2_rowwise\n\n# A tibble: 6 × 6\n# Rowwise:  cyl, am\n  cyl    am                  data title         fig    tbl            \n  &lt;chr&gt;  &lt;chr&gt; &lt;list&lt;tibble[,9]&gt;&gt; &lt;chr&gt;         &lt;list&gt; &lt;list&gt;         \n1 cyl: 4 am: 0            [3 × 9] cyl: 4, am: 0 &lt;gg&gt;   &lt;kntr_kbl [5]&gt; \n2 cyl: 4 am: 1            [8 × 9] cyl: 4, am: 1 &lt;gg&gt;   &lt;kntr_kbl [10]&gt;\n3 cyl: 6 am: 0            [4 × 9] cyl: 6, am: 0 &lt;gg&gt;   &lt;kntr_kbl [6]&gt; \n4 cyl: 6 am: 1            [3 × 9] cyl: 6, am: 1 &lt;gg&gt;   &lt;kntr_kbl [5]&gt; \n5 cyl: 8 am: 0           [12 × 9] cyl: 8, am: 0 &lt;gg&gt;   &lt;kntr_kbl [14]&gt;\n6 cyl: 8 am: 1            [2 × 9] cyl: 8, am: 1 &lt;gg&gt;   &lt;kntr_kbl [4]&gt; \n\n\nThis way, the values of other columns in the list() can be used freely. (In the nest() + map() method, it was necessary to define in advance which columns to use when calling in the map()).\nThe outputs are grouped rowwise and already sorted by cly and am.\n\n\nFigures\nIn the following, df2 is used. (Works in the same way in df2_rowwise).\ndf2 |&gt;\n  render_tabset(c(cyl, am), fig)\n\ncyl: 4cyl: 6cyl: 8\n\n\n\nam: 0am: 1\n\n\n\n\n\n\n\n\n\n\n\n\nam: 0am: 1\n\n\n\n\n\n\n\n\n\n\n\n\nam: 0am: 1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTables\ndf2 |&gt;\n  render_tabset(c(cyl, am), tbl)\n\ncyl: 4cyl: 6cyl: 8\n\n\n\nam: 0am: 1\n\n\n\n\n\nwt\nmpg\n\n\n\n\n3.190\n24.4\n\n\n3.150\n22.8\n\n\n2.465\n21.5\n\n\n\n\n\n\n\n\nwt\nmpg\n\n\n\n\n2.320\n22.8\n\n\n2.200\n32.4\n\n\n1.615\n30.4\n\n\n1.835\n33.9\n\n\n1.935\n27.3\n\n\n2.140\n26.0\n\n\n1.513\n30.4\n\n\n2.780\n21.4\n\n\n\n\n\n\n\n\n\nam: 0am: 1\n\n\n\n\n\nwt\nmpg\n\n\n\n\n3.215\n21.4\n\n\n3.460\n18.1\n\n\n3.440\n19.2\n\n\n3.440\n17.8\n\n\n\n\n\n\n\n\nwt\nmpg\n\n\n\n\n2.620\n21.0\n\n\n2.875\n21.0\n\n\n2.770\n19.7\n\n\n\n\n\n\n\n\n\nam: 0am: 1\n\n\n\n\n\nwt\nmpg\n\n\n\n\n3.440\n18.7\n\n\n3.570\n14.3\n\n\n4.070\n16.4\n\n\n3.730\n17.3\n\n\n3.780\n15.2\n\n\n5.250\n10.4\n\n\n5.424\n10.4\n\n\n5.345\n14.7\n\n\n3.520\n15.5\n\n\n3.435\n15.2\n\n\n3.840\n13.3\n\n\n3.845\n19.2\n\n\n\n\n\n\n\n\nwt\nmpg\n\n\n\n\n3.17\n15.8\n\n\n3.57\n15.0\n\n\n\n\n\n\n\n\n\n\n\nFigures and tables\ndf2 |&gt;\n  render_tabset(c(cyl, am), c(fig, tbl))\n\ncyl: 4cyl: 6cyl: 8\n\n\n\nam: 0am: 1\n\n\n\n\n\n\nwt\nmpg\n\n\n\n\n3.190\n24.4\n\n\n3.150\n22.8\n\n\n2.465\n21.5\n\n\n\n\n\n\n\n\n\nwt\nmpg\n\n\n\n\n2.320\n22.8\n\n\n2.200\n32.4\n\n\n1.615\n30.4\n\n\n1.835\n33.9\n\n\n1.935\n27.3\n\n\n2.140\n26.0\n\n\n1.513\n30.4\n\n\n2.780\n21.4\n\n\n\n\n\n\n\n\n\nam: 0am: 1\n\n\n\n\n\n\nwt\nmpg\n\n\n\n\n3.215\n21.4\n\n\n3.460\n18.1\n\n\n3.440\n19.2\n\n\n3.440\n17.8\n\n\n\n\n\n\n\n\n\nwt\nmpg\n\n\n\n\n2.620\n21.0\n\n\n2.875\n21.0\n\n\n2.770\n19.7\n\n\n\n\n\n\n\n\n\nam: 0am: 1\n\n\n\n\n\n\nwt\nmpg\n\n\n\n\n3.440\n18.7\n\n\n3.570\n14.3\n\n\n4.070\n16.4\n\n\n3.730\n17.3\n\n\n3.780\n15.2\n\n\n5.250\n10.4\n\n\n5.424\n10.4\n\n\n5.345\n14.7\n\n\n3.520\n15.5\n\n\n3.435\n15.2\n\n\n3.840\n13.3\n\n\n3.845\n19.2\n\n\n\n\n\n\n\n\n\nwt\nmpg\n\n\n\n\n3.17\n15.8\n\n\n3.57\n15.0\n\n\n\n\n\n\n\n\n\n\n\nlayout\nUse the layout argument to display figure and table side by side with a width of 7:3.\ndf2 |&gt;\n  render_tabset(c(cyl, am), c(fig, tbl), layout = '::: {layout=\"[7, 3]\"}')\n\ncyl: 4cyl: 6cyl: 8\n\n\n\nam: 0am: 1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nwt\nmpg\n\n\n\n\n3.190\n24.4\n\n\n3.150\n22.8\n\n\n2.465\n21.5\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nwt\nmpg\n\n\n\n\n2.320\n22.8\n\n\n2.200\n32.4\n\n\n1.615\n30.4\n\n\n1.835\n33.9\n\n\n1.935\n27.3\n\n\n2.140\n26.0\n\n\n1.513\n30.4\n\n\n2.780\n21.4\n\n\n\n\n\n\n\n\n\n\n\n\nam: 0am: 1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nwt\nmpg\n\n\n\n\n3.215\n21.4\n\n\n3.460\n18.1\n\n\n3.440\n19.2\n\n\n3.440\n17.8\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nwt\nmpg\n\n\n\n\n2.620\n21.0\n\n\n2.875\n21.0\n\n\n2.770\n19.7\n\n\n\n\n\n\n\n\n\n\n\n\nam: 0am: 1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nwt\nmpg\n\n\n\n\n3.440\n18.7\n\n\n3.570\n14.3\n\n\n4.070\n16.4\n\n\n3.730\n17.3\n\n\n3.780\n15.2\n\n\n5.250\n10.4\n\n\n5.424\n10.4\n\n\n5.345\n14.7\n\n\n3.520\n15.5\n\n\n3.435\n15.2\n\n\n3.840\n13.3\n\n\n3.845\n19.2\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nwt\nmpg\n\n\n\n\n3.17\n15.8\n\n\n3.57\n15.0",
    "crumbs": [
      "Articles",
      "Walk through"
    ]
  },
  {
    "objectID": "vignettes/walk_through.html#advanced-examples",
    "href": "vignettes/walk_through.html#advanced-examples",
    "title": "Walk through",
    "section": "Advanced examples",
    "text": "Advanced examples\n\nPre-saved figures\nSimply format the path to the saved figure like ![&lt;caption&gt;](&lt;path/to/figure.png&gt;) and execute render_tabset() as before.\n\n# directory for saving figures\ndir_fig &lt;- \"figures\"\n\n# delete the directory if it exists\nif (dir.exists(dir_fig)) {\n  unlink(dir_fig, recursive = TRUE)\n}\n\n# create the directory\ndir.create(dir_fig)\n\n# new sample data\ndf3 &lt;- df2 |&gt;\n  mutate(\n    # Create file names to save\n    fig_path = file.path(\n      dir_fig,\n      paste0(gsub(\"[[:punct:]]\\\\s\", \"_\", title), \"_map2_chr.png\")\n    ),\n    # To make the return value a character vector, use `map2_chr()`\n    fig_path_md = map2_chr(\n      fig,\n      fig_path,\n      \\(p, path) {\n        # save figure\n        ggsave(path, p)\n        # format path to markdown style\n        sprintf(\"![This is a caption for %s.](%s)\", path, path)\n      }\n    )\n  ) |&gt;\n  select(cyl, am, fig_path_md)\n\ndf3\n\n# A tibble: 6 × 3\n  cyl    am    fig_path_md                                                      \n  &lt;chr&gt;  &lt;chr&gt; &lt;chr&gt;                                                            \n1 cyl: 6 am: 1 ![This is a caption for figures/cyl_6_am_1_map2_chr.png.](figure…\n2 cyl: 4 am: 1 ![This is a caption for figures/cyl_4_am_1_map2_chr.png.](figure…\n3 cyl: 6 am: 0 ![This is a caption for figures/cyl_6_am_0_map2_chr.png.](figure…\n4 cyl: 8 am: 0 ![This is a caption for figures/cyl_8_am_0_map2_chr.png.](figure…\n5 cyl: 4 am: 0 ![This is a caption for figures/cyl_4_am_0_map2_chr.png.](figure…\n6 cyl: 8 am: 1 ![This is a caption for figures/cyl_8_am_1_map2_chr.png.](figure…\n\n\nThen execute render_tabset() as in basic usage.\ndf3 |&gt;\n  render_tabset(c(cyl, am), fig_path_md)\n\ncyl: 4cyl: 6cyl: 8\n\n\n\nam: 0am: 1\n\n\n\n\n\nThis is a caption for figures/cyl_4_am_0_map2_chr.png.\n\n\n\n\n\n\n\nThis is a caption for figures/cyl_4_am_1_map2_chr.png.\n\n\n\n\n\n\n\n\nam: 0am: 1\n\n\n\n\n\nThis is a caption for figures/cyl_6_am_0_map2_chr.png.\n\n\n\n\n\n\n\nThis is a caption for figures/cyl_6_am_1_map2_chr.png.\n\n\n\n\n\n\n\n\nam: 0am: 1\n\n\n\n\n\nThis is a caption for figures/cyl_8_am_0_map2_chr.png.\n\n\n\n\n\n\n\nThis is a caption for figures/cyl_8_am_1_map2_chr.png.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nnest_by() + list({ &lt;some complex code&gt; })\n\n\n\nReplace the above nest() + map() method with rowwise() + list().\n\ndf3_rowwise &lt;- df2_rowwise |&gt;\n  mutate(\n    # Create file names to save\n    fig_path = file.path(\n      dir_fig,\n      paste0(gsub(\"[[:punct:]]\\\\s\", \"_\", title), \"_rowwise.png\")\n    ),\n    fig_path_md = {\n      # save figure\n      ggsave(fig_path, fig)\n      # format path to markdown style\n      sprintf(\"![This is a caption for %s.](%s)\", fig_path, fig_path)\n    }\n  ) |&gt;\n  select(cyl, am, fig_path_md)\n\ndf3_rowwise\n\n# A tibble: 6 × 3\n# Rowwise:  cyl, am\n  cyl    am    fig_path_md                                                      \n  &lt;chr&gt;  &lt;chr&gt; &lt;chr&gt;                                                            \n1 cyl: 4 am: 0 ![This is a caption for figures/cyl_4_am_0_rowwise.png.](figures…\n2 cyl: 4 am: 1 ![This is a caption for figures/cyl_4_am_1_rowwise.png.](figures…\n3 cyl: 6 am: 0 ![This is a caption for figures/cyl_6_am_0_rowwise.png.](figures…\n4 cyl: 6 am: 1 ![This is a caption for figures/cyl_6_am_1_rowwise.png.](figures…\n5 cyl: 8 am: 0 ![This is a caption for figures/cyl_8_am_0_rowwise.png.](figures…\n6 cyl: 8 am: 1 ![This is a caption for figures/cyl_8_am_1_rowwise.png.](figures…\n\n\nThen execute render_tabset() as in basic usage.\ndf3_rowwise |&gt;\n  render_tabset(c(cyl, am), fig_path_md)\n\ncyl: 4cyl: 6cyl: 8\n\n\n\nam: 0am: 1\n\n\n\n\n\nThis is a caption for figures/cyl_4_am_0_rowwise.png.\n\n\n\n\n\n\n\nThis is a caption for figures/cyl_4_am_1_rowwise.png.\n\n\n\n\n\n\n\n\nam: 0am: 1\n\n\n\n\n\nThis is a caption for figures/cyl_6_am_0_rowwise.png.\n\n\n\n\n\n\n\nThis is a caption for figures/cyl_6_am_1_rowwise.png.\n\n\n\n\n\n\n\n\nam: 0am: 1\n\n\n\n\n\nThis is a caption for figures/cyl_8_am_0_rowwise.png.\n\n\n\n\n\n\n\nThis is a caption for figures/cyl_8_am_1_rowwise.png.\n\n\n\n\n\n\n\n\n\n\n\n\nPlotly\nYou can use {plotly} to create interactive figures.\nFirst, let’s create figures using {plotly}. Simply apply plotly::ggplotly() to the already created ggplot object. Then it is passed to htmltools::div().\n\ndf4 &lt;- df2 |&gt;\n  mutate(\n    fig_plotly = map(\n      fig,\n      \\(p) {\n        ggplotly(\n          p,\n          height = 700 # make large figure, for example\n        ) |&gt;\n          htmltools::div()\n      }\n    )\n  ) |&gt;\n  select(cyl, am, fig_plotly)\n\ndf4\n\n# A tibble: 6 × 3\n  cyl    am    fig_plotly\n  &lt;chr&gt;  &lt;chr&gt; &lt;list&gt;    \n1 cyl: 6 am: 1 &lt;shiny.tg&gt;\n2 cyl: 4 am: 1 &lt;shiny.tg&gt;\n3 cyl: 6 am: 0 &lt;shiny.tg&gt;\n4 cyl: 8 am: 0 &lt;shiny.tg&gt;\n5 cyl: 4 am: 0 &lt;shiny.tg&gt;\n6 cyl: 8 am: 1 &lt;shiny.tg&gt;\n\n\n\n\n\n\n\n\nResolve javascript dependencies\n\n\n\nWhen outputting tables or figures that use javascript (such as {plotly}, {leaflet}, {DT}, {reactable}, etc.), it seems javascript dependencies need to be resolved. The easiest way seems to output them once in a separate chunk.\nReferences:\n\noffline plots in for loops - github\nUsing ggplotly and DT from a for loop in Rmarkdown - stackoverflow\nplotly objects are invisible in R Markdown - stackoverflow\n\n\n\nAs above, this example prepares a chunk that executes only plot_ly(). Set #| include: false so that this chunk and its output will not appear on the report.\n```{r}\n#| include: false\n\nplot_ly()\n```\nThen execute render_tabset() as in basic usage. Add column: page-right chunk option to increase the size of the figure.\n```{r}\n#| results: asis\n#| column: page-right\n\ndf4 |&gt;\n  render_tabset(c(cyl, am), fig_plotly)\n```\n\n\ncyl: 4cyl: 6cyl: 8\n\n\n\nam: 0am: 1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nam: 0am: 1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nam: 0am: 1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLeaflet\nAnother example the above flow (wrap output with htmltools::div() and then creating dummy plot in a separate chunk and then render_tabset()) is Leaflet. In R, {leaflet} is useful for plotting map.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTables\nHere we will show you how to use render_tabset() in a popular package for rendering tables. This example uses knitr::kable(), gt::gt(), gt::opt_interactive(), flextable::flextable(), DT::datatable(), reactable::reactable() and tinytable::tt().\n\ntables &lt;-\n  df2 |&gt;\n  select(cyl, am, data) |&gt;\n  mutate(\n    kable = map(data, knitr::kable),\n    gt = map(data, gt::gt),\n    gt_interactive = map(gt, gt::opt_interactive),\n    tt = map(data, tinytable::tt),\n    flex = map_chr(\n      data,\n      \\(data) {\n        flextable::flextable(data) |&gt;\n          knitr::knit_print()\n      }\n    ),\n    DT = map(\n      data,\n      \\(data) {\n        DT::datatable(data) |&gt;\n          htmltools::div()\n      }\n    ),\n    reac = map(\n      data,\n      \\(data) {\n        reactable::reactable(data) |&gt;\n          htmltools::div()\n      }\n    ),\n    section_kable = \"#### knitr::kable()\",\n    section_gt = \"#### gt::gt()\",\n    section_gt_interactive = paste(\n      \"#### gt::gt() |&gt; gt::opt_interactive()\",\n      \"(and run in a separate chunk)\"\n    ),\n    section_tt = \"#### tinytable::tt()\",\n    section_flex = paste(\n      \"#### flextable::flextable() |&gt; knitr::knit_print()\",\n      \"(using map_chr())\"\n    ),\n    section_DT = paste(\n      \"#### DT::datatable() |&gt; htmltools::div()\",\n      \"(and run in a separate chunk)\"\n    ),\n    section_reac = paste(\n      \"#### reactable::reactable() |&gt; htmltools::div()\",\n      \"(and run in a separate chunk)\"\n    )\n  )\n\ntables\n\n# A tibble: 6 × 17\n  cyl    am    data     kable      gt       gt_interactive tt             flex  \n  &lt;chr&gt;  &lt;chr&gt; &lt;list&gt;   &lt;list&gt;     &lt;list&gt;   &lt;list&gt;         &lt;list&gt;         &lt;chr&gt; \n1 cyl: 6 am: 1 &lt;tibble&gt; &lt;kntr_kbl&gt; &lt;gt_tbl&gt; &lt;gt_tbl [17]&gt;  &lt;tinytabl[,9]&gt; \"\\n``…\n2 cyl: 4 am: 1 &lt;tibble&gt; &lt;kntr_kbl&gt; &lt;gt_tbl&gt; &lt;gt_tbl [17]&gt;  &lt;tinytabl[,9]&gt; \"\\n``…\n3 cyl: 6 am: 0 &lt;tibble&gt; &lt;kntr_kbl&gt; &lt;gt_tbl&gt; &lt;gt_tbl [17]&gt;  &lt;tinytabl[,9]&gt; \"\\n``…\n4 cyl: 8 am: 0 &lt;tibble&gt; &lt;kntr_kbl&gt; &lt;gt_tbl&gt; &lt;gt_tbl [17]&gt;  &lt;tinytabl[,9]&gt; \"\\n``…\n5 cyl: 4 am: 0 &lt;tibble&gt; &lt;kntr_kbl&gt; &lt;gt_tbl&gt; &lt;gt_tbl [17]&gt;  &lt;tinytabl[,9]&gt; \"\\n``…\n6 cyl: 8 am: 1 &lt;tibble&gt; &lt;kntr_kbl&gt; &lt;gt_tbl&gt; &lt;gt_tbl [17]&gt;  &lt;tinytabl[,9]&gt; \"\\n``…\n# ℹ 9 more variables: DT &lt;list&gt;, reac &lt;list&gt;, section_kable &lt;chr&gt;,\n#   section_gt &lt;chr&gt;, section_gt_interactive &lt;chr&gt;, section_tt &lt;chr&gt;,\n#   section_flex &lt;chr&gt;, section_DT &lt;chr&gt;, section_reac &lt;chr&gt;\n\n\nknitr::kable(), gt::gt(), and tinytable::tt() are the simplest.\nThe output of flextable::flextable() is managed by the method knitr::knit_print(). After execution, raw HTML is obtained, which is turned into a character type column using map_chr().\ngt::opt_interactive(), {DT} and {reactable} use javascript. They should be wrapped with htmltools::div(), except for gt::opt_interactive(), and run in a separate chunk to resolve javascript dependencies. Don’t forget #| include: false.\n```{r}\n#| include: false\n\ngt::gt(mtcars) |&gt;\n  gt::opt_interactive()\n\nDT::datatable(mtcars)\n\nreactable::reactable(mtcars)\n```\nThen execute render_tabset(). To make the results easier to see, sections are also to be added.\ntables |&gt;\n  render_tabset(\n    c(cyl, am),\n    c(\n      section_kable,\n      kable,\n      section_gt,\n      gt,\n      section_gt_interactive,\n      gt_interactive,\n      section_tt,\n      tt,\n      section_flex,\n      flex,\n      section_DT,\n      DT,\n      section_reac,\n      reac\n    )\n  )\n\ncyl: 4cyl: 6cyl: 8\n\n\n\nam: 0am: 1\n\n\n\nknitr::kable()\n\n\n\nmpg\ndisp\nhp\ndrat\nwt\nqsec\nvs\ngear\ncarb\n\n\n\n\n24.4\n146.7\n62\n3.69\n3.190\n20.00\n1\n4\n2\n\n\n22.8\n140.8\n95\n3.92\n3.150\n22.90\n1\n4\n2\n\n\n21.5\n120.1\n97\n3.70\n2.465\n20.01\n1\n3\n1\n\n\n\n\n\ngt::gt()\n\n\n\n\n\n\nmpg\n\n\ndisp\n\n\nhp\n\n\ndrat\n\n\nwt\n\n\nqsec\n\n\nvs\n\n\ngear\n\n\ncarb\n\n\n\n\n\n\n24.4\n\n\n146.7\n\n\n62\n\n\n3.69\n\n\n3.190\n\n\n20.00\n\n\n1\n\n\n4\n\n\n2\n\n\n\n\n22.8\n\n\n140.8\n\n\n95\n\n\n3.92\n\n\n3.150\n\n\n22.90\n\n\n1\n\n\n4\n\n\n2\n\n\n\n\n21.5\n\n\n120.1\n\n\n97\n\n\n3.70\n\n\n2.465\n\n\n20.01\n\n\n1\n\n\n3\n\n\n1\n\n\n\n\n\n\n\ngt::gt() |&gt; gt::opt_interactive() (and run in a separate chunk)\n\n\n\n\n\n\n\n\n\ntinytable::tt()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmpg\ndisp\nhp\ndrat\nwt\nqsec\nvs\ngear\ncarb\n\n\n\n\n24.4\n146.7\n62\n3.69\n3.190\n20.00\n1\n4\n2\n\n\n22.8\n140.8\n95\n3.92\n3.150\n22.90\n1\n4\n2\n\n\n21.5\n120.1\n97\n3.70\n2.465\n20.01\n1\n3\n1\n\n\n\n\n\nflextable::flextable() |&gt; knitr::knit_print() (using map_chr())\nmpgdisphpdratwtqsecvsgearcarb24.4146.7623.693.19020.0014222.8140.8953.923.15022.9014221.5120.1973.702.46520.01131\n\n\nDT::datatable() |&gt; htmltools::div() (and run in a separate chunk)\n\n\n\n\n\n\n\n\nreactable::reactable() |&gt; htmltools::div() (and run in a separate chunk)\n\n\n\n\n\n\n\n\n\n\nknitr::kable()\n\n\n\nmpg\ndisp\nhp\ndrat\nwt\nqsec\nvs\ngear\ncarb\n\n\n\n\n22.8\n108.0\n93\n3.85\n2.320\n18.61\n1\n4\n1\n\n\n32.4\n78.7\n66\n4.08\n2.200\n19.47\n1\n4\n1\n\n\n30.4\n75.7\n52\n4.93\n1.615\n18.52\n1\n4\n2\n\n\n33.9\n71.1\n65\n4.22\n1.835\n19.90\n1\n4\n1\n\n\n27.3\n79.0\n66\n4.08\n1.935\n18.90\n1\n4\n1\n\n\n26.0\n120.3\n91\n4.43\n2.140\n16.70\n0\n5\n2\n\n\n30.4\n95.1\n113\n3.77\n1.513\n16.90\n1\n5\n2\n\n\n21.4\n121.0\n109\n4.11\n2.780\n18.60\n1\n4\n2\n\n\n\n\n\ngt::gt()\n\n\n\n\n\n\nmpg\n\n\ndisp\n\n\nhp\n\n\ndrat\n\n\nwt\n\n\nqsec\n\n\nvs\n\n\ngear\n\n\ncarb\n\n\n\n\n\n\n22.8\n\n\n108.0\n\n\n93\n\n\n3.85\n\n\n2.320\n\n\n18.61\n\n\n1\n\n\n4\n\n\n1\n\n\n\n\n32.4\n\n\n78.7\n\n\n66\n\n\n4.08\n\n\n2.200\n\n\n19.47\n\n\n1\n\n\n4\n\n\n1\n\n\n\n\n30.4\n\n\n75.7\n\n\n52\n\n\n4.93\n\n\n1.615\n\n\n18.52\n\n\n1\n\n\n4\n\n\n2\n\n\n\n\n33.9\n\n\n71.1\n\n\n65\n\n\n4.22\n\n\n1.835\n\n\n19.90\n\n\n1\n\n\n4\n\n\n1\n\n\n\n\n27.3\n\n\n79.0\n\n\n66\n\n\n4.08\n\n\n1.935\n\n\n18.90\n\n\n1\n\n\n4\n\n\n1\n\n\n\n\n26.0\n\n\n120.3\n\n\n91\n\n\n4.43\n\n\n2.140\n\n\n16.70\n\n\n0\n\n\n5\n\n\n2\n\n\n\n\n30.4\n\n\n95.1\n\n\n113\n\n\n3.77\n\n\n1.513\n\n\n16.90\n\n\n1\n\n\n5\n\n\n2\n\n\n\n\n21.4\n\n\n121.0\n\n\n109\n\n\n4.11\n\n\n2.780\n\n\n18.60\n\n\n1\n\n\n4\n\n\n2\n\n\n\n\n\n\n\ngt::gt() |&gt; gt::opt_interactive() (and run in a separate chunk)\n\n\n\n\n\n\n\n\n\ntinytable::tt()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmpg\ndisp\nhp\ndrat\nwt\nqsec\nvs\ngear\ncarb\n\n\n\n\n22.8\n108.0\n93\n3.85\n2.320\n18.61\n1\n4\n1\n\n\n32.4\n78.7\n66\n4.08\n2.200\n19.47\n1\n4\n1\n\n\n30.4\n75.7\n52\n4.93\n1.615\n18.52\n1\n4\n2\n\n\n33.9\n71.1\n65\n4.22\n1.835\n19.90\n1\n4\n1\n\n\n27.3\n79.0\n66\n4.08\n1.935\n18.90\n1\n4\n1\n\n\n26.0\n120.3\n91\n4.43\n2.140\n16.70\n0\n5\n2\n\n\n30.4\n95.1\n113\n3.77\n1.513\n16.90\n1\n5\n2\n\n\n21.4\n121.0\n109\n4.11\n2.780\n18.60\n1\n4\n2\n\n\n\n\n\nflextable::flextable() |&gt; knitr::knit_print() (using map_chr())\nmpgdisphpdratwtqsecvsgearcarb22.8108.0933.852.32018.6114132.478.7664.082.20019.4714130.475.7524.931.61518.5214233.971.1654.221.83519.9014127.379.0664.081.93518.9014126.0120.3914.432.14016.7005230.495.11133.771.51316.9015221.4121.01094.112.78018.60142\n\n\nDT::datatable() |&gt; htmltools::div() (and run in a separate chunk)\n\n\n\n\n\n\n\n\nreactable::reactable() |&gt; htmltools::div() (and run in a separate chunk)\n\n\n\n\n\n\n\n\n\n\n\n\n\nam: 0am: 1\n\n\n\nknitr::kable()\n\n\n\nmpg\ndisp\nhp\ndrat\nwt\nqsec\nvs\ngear\ncarb\n\n\n\n\n21.4\n258.0\n110\n3.08\n3.215\n19.44\n1\n3\n1\n\n\n18.1\n225.0\n105\n2.76\n3.460\n20.22\n1\n3\n1\n\n\n19.2\n167.6\n123\n3.92\n3.440\n18.30\n1\n4\n4\n\n\n17.8\n167.6\n123\n3.92\n3.440\n18.90\n1\n4\n4\n\n\n\n\n\ngt::gt()\n\n\n\n\n\n\nmpg\n\n\ndisp\n\n\nhp\n\n\ndrat\n\n\nwt\n\n\nqsec\n\n\nvs\n\n\ngear\n\n\ncarb\n\n\n\n\n\n\n21.4\n\n\n258.0\n\n\n110\n\n\n3.08\n\n\n3.215\n\n\n19.44\n\n\n1\n\n\n3\n\n\n1\n\n\n\n\n18.1\n\n\n225.0\n\n\n105\n\n\n2.76\n\n\n3.460\n\n\n20.22\n\n\n1\n\n\n3\n\n\n1\n\n\n\n\n19.2\n\n\n167.6\n\n\n123\n\n\n3.92\n\n\n3.440\n\n\n18.30\n\n\n1\n\n\n4\n\n\n4\n\n\n\n\n17.8\n\n\n167.6\n\n\n123\n\n\n3.92\n\n\n3.440\n\n\n18.90\n\n\n1\n\n\n4\n\n\n4\n\n\n\n\n\n\n\ngt::gt() |&gt; gt::opt_interactive() (and run in a separate chunk)\n\n\n\n\n\n\n\n\n\ntinytable::tt()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmpg\ndisp\nhp\ndrat\nwt\nqsec\nvs\ngear\ncarb\n\n\n\n\n21.4\n258.0\n110\n3.08\n3.215\n19.44\n1\n3\n1\n\n\n18.1\n225.0\n105\n2.76\n3.460\n20.22\n1\n3\n1\n\n\n19.2\n167.6\n123\n3.92\n3.440\n18.30\n1\n4\n4\n\n\n17.8\n167.6\n123\n3.92\n3.440\n18.90\n1\n4\n4\n\n\n\n\n\nflextable::flextable() |&gt; knitr::knit_print() (using map_chr())\nmpgdisphpdratwtqsecvsgearcarb21.4258.01103.083.21519.4413118.1225.01052.763.46020.2213119.2167.61233.923.44018.3014417.8167.61233.923.44018.90144\n\n\nDT::datatable() |&gt; htmltools::div() (and run in a separate chunk)\n\n\n\n\n\n\n\n\nreactable::reactable() |&gt; htmltools::div() (and run in a separate chunk)\n\n\n\n\n\n\n\n\n\n\nknitr::kable()\n\n\n\nmpg\ndisp\nhp\ndrat\nwt\nqsec\nvs\ngear\ncarb\n\n\n\n\n21.0\n160\n110\n3.90\n2.620\n16.46\n0\n4\n4\n\n\n21.0\n160\n110\n3.90\n2.875\n17.02\n0\n4\n4\n\n\n19.7\n145\n175\n3.62\n2.770\n15.50\n0\n5\n6\n\n\n\n\n\ngt::gt()\n\n\n\n\n\n\nmpg\n\n\ndisp\n\n\nhp\n\n\ndrat\n\n\nwt\n\n\nqsec\n\n\nvs\n\n\ngear\n\n\ncarb\n\n\n\n\n\n\n21.0\n\n\n160\n\n\n110\n\n\n3.90\n\n\n2.620\n\n\n16.46\n\n\n0\n\n\n4\n\n\n4\n\n\n\n\n21.0\n\n\n160\n\n\n110\n\n\n3.90\n\n\n2.875\n\n\n17.02\n\n\n0\n\n\n4\n\n\n4\n\n\n\n\n19.7\n\n\n145\n\n\n175\n\n\n3.62\n\n\n2.770\n\n\n15.50\n\n\n0\n\n\n5\n\n\n6\n\n\n\n\n\n\n\ngt::gt() |&gt; gt::opt_interactive() (and run in a separate chunk)\n\n\n\n\n\n\n\n\n\ntinytable::tt()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmpg\ndisp\nhp\ndrat\nwt\nqsec\nvs\ngear\ncarb\n\n\n\n\n21.0\n160\n110\n3.90\n2.620\n16.46\n0\n4\n4\n\n\n21.0\n160\n110\n3.90\n2.875\n17.02\n0\n4\n4\n\n\n19.7\n145\n175\n3.62\n2.770\n15.50\n0\n5\n6\n\n\n\n\n\nflextable::flextable() |&gt; knitr::knit_print() (using map_chr())\nmpgdisphpdratwtqsecvsgearcarb21.01601103.902.62016.4604421.01601103.902.87517.0204419.71451753.622.77015.50056\n\n\nDT::datatable() |&gt; htmltools::div() (and run in a separate chunk)\n\n\n\n\n\n\n\n\nreactable::reactable() |&gt; htmltools::div() (and run in a separate chunk)\n\n\n\n\n\n\n\n\n\n\n\n\n\nam: 0am: 1\n\n\n\nknitr::kable()\n\n\n\nmpg\ndisp\nhp\ndrat\nwt\nqsec\nvs\ngear\ncarb\n\n\n\n\n18.7\n360.0\n175\n3.15\n3.440\n17.02\n0\n3\n2\n\n\n14.3\n360.0\n245\n3.21\n3.570\n15.84\n0\n3\n4\n\n\n16.4\n275.8\n180\n3.07\n4.070\n17.40\n0\n3\n3\n\n\n17.3\n275.8\n180\n3.07\n3.730\n17.60\n0\n3\n3\n\n\n15.2\n275.8\n180\n3.07\n3.780\n18.00\n0\n3\n3\n\n\n10.4\n472.0\n205\n2.93\n5.250\n17.98\n0\n3\n4\n\n\n10.4\n460.0\n215\n3.00\n5.424\n17.82\n0\n3\n4\n\n\n14.7\n440.0\n230\n3.23\n5.345\n17.42\n0\n3\n4\n\n\n15.5\n318.0\n150\n2.76\n3.520\n16.87\n0\n3\n2\n\n\n15.2\n304.0\n150\n3.15\n3.435\n17.30\n0\n3\n2\n\n\n13.3\n350.0\n245\n3.73\n3.840\n15.41\n0\n3\n4\n\n\n19.2\n400.0\n175\n3.08\n3.845\n17.05\n0\n3\n2\n\n\n\n\n\ngt::gt()\n\n\n\n\n\n\nmpg\n\n\ndisp\n\n\nhp\n\n\ndrat\n\n\nwt\n\n\nqsec\n\n\nvs\n\n\ngear\n\n\ncarb\n\n\n\n\n\n\n18.7\n\n\n360.0\n\n\n175\n\n\n3.15\n\n\n3.440\n\n\n17.02\n\n\n0\n\n\n3\n\n\n2\n\n\n\n\n14.3\n\n\n360.0\n\n\n245\n\n\n3.21\n\n\n3.570\n\n\n15.84\n\n\n0\n\n\n3\n\n\n4\n\n\n\n\n16.4\n\n\n275.8\n\n\n180\n\n\n3.07\n\n\n4.070\n\n\n17.40\n\n\n0\n\n\n3\n\n\n3\n\n\n\n\n17.3\n\n\n275.8\n\n\n180\n\n\n3.07\n\n\n3.730\n\n\n17.60\n\n\n0\n\n\n3\n\n\n3\n\n\n\n\n15.2\n\n\n275.8\n\n\n180\n\n\n3.07\n\n\n3.780\n\n\n18.00\n\n\n0\n\n\n3\n\n\n3\n\n\n\n\n10.4\n\n\n472.0\n\n\n205\n\n\n2.93\n\n\n5.250\n\n\n17.98\n\n\n0\n\n\n3\n\n\n4\n\n\n\n\n10.4\n\n\n460.0\n\n\n215\n\n\n3.00\n\n\n5.424\n\n\n17.82\n\n\n0\n\n\n3\n\n\n4\n\n\n\n\n14.7\n\n\n440.0\n\n\n230\n\n\n3.23\n\n\n5.345\n\n\n17.42\n\n\n0\n\n\n3\n\n\n4\n\n\n\n\n15.5\n\n\n318.0\n\n\n150\n\n\n2.76\n\n\n3.520\n\n\n16.87\n\n\n0\n\n\n3\n\n\n2\n\n\n\n\n15.2\n\n\n304.0\n\n\n150\n\n\n3.15\n\n\n3.435\n\n\n17.30\n\n\n0\n\n\n3\n\n\n2\n\n\n\n\n13.3\n\n\n350.0\n\n\n245\n\n\n3.73\n\n\n3.840\n\n\n15.41\n\n\n0\n\n\n3\n\n\n4\n\n\n\n\n19.2\n\n\n400.0\n\n\n175\n\n\n3.08\n\n\n3.845\n\n\n17.05\n\n\n0\n\n\n3\n\n\n2\n\n\n\n\n\n\n\ngt::gt() |&gt; gt::opt_interactive() (and run in a separate chunk)\n\n\n\n\n\n\n\n\n\ntinytable::tt()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmpg\ndisp\nhp\ndrat\nwt\nqsec\nvs\ngear\ncarb\n\n\n\n\n18.7\n360.0\n175\n3.15\n3.440\n17.02\n0\n3\n2\n\n\n14.3\n360.0\n245\n3.21\n3.570\n15.84\n0\n3\n4\n\n\n16.4\n275.8\n180\n3.07\n4.070\n17.40\n0\n3\n3\n\n\n17.3\n275.8\n180\n3.07\n3.730\n17.60\n0\n3\n3\n\n\n15.2\n275.8\n180\n3.07\n3.780\n18.00\n0\n3\n3\n\n\n10.4\n472.0\n205\n2.93\n5.250\n17.98\n0\n3\n4\n\n\n10.4\n460.0\n215\n3.00\n5.424\n17.82\n0\n3\n4\n\n\n14.7\n440.0\n230\n3.23\n5.345\n17.42\n0\n3\n4\n\n\n15.5\n318.0\n150\n2.76\n3.520\n16.87\n0\n3\n2\n\n\n15.2\n304.0\n150\n3.15\n3.435\n17.30\n0\n3\n2\n\n\n13.3\n350.0\n245\n3.73\n3.840\n15.41\n0\n3\n4\n\n\n19.2\n400.0\n175\n3.08\n3.845\n17.05\n0\n3\n2\n\n\n\n\n\nflextable::flextable() |&gt; knitr::knit_print() (using map_chr())\nmpgdisphpdratwtqsecvsgearcarb18.7360.01753.153.44017.0203214.3360.02453.213.57015.8403416.4275.81803.074.07017.4003317.3275.81803.073.73017.6003315.2275.81803.073.78018.0003310.4472.02052.935.25017.9803410.4460.02153.005.42417.8203414.7440.02303.235.34517.4203415.5318.01502.763.52016.8703215.2304.01503.153.43517.3003213.3350.02453.733.84015.4103419.2400.01753.083.84517.05032\n\n\nDT::datatable() |&gt; htmltools::div() (and run in a separate chunk)\n\n\n\n\n\n\n\n\nreactable::reactable() |&gt; htmltools::div() (and run in a separate chunk)\n\n\n\n\n\n\n\n\n\n\nknitr::kable()\n\n\n\nmpg\ndisp\nhp\ndrat\nwt\nqsec\nvs\ngear\ncarb\n\n\n\n\n15.8\n351\n264\n4.22\n3.17\n14.5\n0\n5\n4\n\n\n15.0\n301\n335\n3.54\n3.57\n14.6\n0\n5\n8\n\n\n\n\n\ngt::gt()\n\n\n\n\n\n\nmpg\n\n\ndisp\n\n\nhp\n\n\ndrat\n\n\nwt\n\n\nqsec\n\n\nvs\n\n\ngear\n\n\ncarb\n\n\n\n\n\n\n15.8\n\n\n351\n\n\n264\n\n\n4.22\n\n\n3.17\n\n\n14.5\n\n\n0\n\n\n5\n\n\n4\n\n\n\n\n15.0\n\n\n301\n\n\n335\n\n\n3.54\n\n\n3.57\n\n\n14.6\n\n\n0\n\n\n5\n\n\n8\n\n\n\n\n\n\n\ngt::gt() |&gt; gt::opt_interactive() (and run in a separate chunk)\n\n\n\n\n\n\n\n\n\ntinytable::tt()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmpg\ndisp\nhp\ndrat\nwt\nqsec\nvs\ngear\ncarb\n\n\n\n\n15.8\n351\n264\n4.22\n3.17\n14.5\n0\n5\n4\n\n\n15.0\n301\n335\n3.54\n3.57\n14.6\n0\n5\n8\n\n\n\n\n\nflextable::flextable() |&gt; knitr::knit_print() (using map_chr())\nmpgdisphpdratwtqsecvsgearcarb15.83512644.223.1714.505415.03013353.543.5714.6058\n\n\nDT::datatable() |&gt; htmltools::div() (and run in a separate chunk)\n\n\n\n\n\n\n\n\nreactable::reactable() |&gt; htmltools::div() (and run in a separate chunk)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSession Info\n\n\n# save the session info as an object\nsess &lt;- sessioninfo::session_info(pkgs = \"attached\")\n\n# inject the Quarto info\nsess$platform$quarto &lt;- paste(\n  quarto::quarto_version(),\n  \"@\",\n  normalizePath(quarto::quarto_path())\n)\n\n# print it out\nsess\n\n─ Session info ───────────────────────────────────────────────────────────────\n setting  value\n version  R version 4.4.3 (2025-02-28)\n os       Ubuntu 24.04.2 LTS\n system   x86_64, linux-gnu\n ui       X11\n language (EN)\n collate  C.UTF-8\n ctype    C.UTF-8\n tz       Etc/UTC\n date     2025-03-07\n pandoc   3.4 @ /opt/quarto/bin/tools/ (via rmarkdown)\n quarto   1.6.42 @ /opt/quarto/bin/quarto\n\n─ Packages ───────────────────────────────────────────────────────────────────\n package   * version    date (UTC) lib source\n dplyr     * 1.1.4      2023-11-17 [2] RSPM (R 4.4.0)\n DT        * 0.33       2024-04-04 [2] RSPM (R 4.4.0)\n flextable * 0.9.7      2024-10-27 [2] RSPM (R 4.4.0)\n ggplot2   * 3.5.1      2024-04-23 [2] RSPM (R 4.4.0)\n gt        * 0.11.1     2024-10-04 [2] RSPM (R 4.4.0)\n htmltools * 0.5.8.1    2024-04-04 [2] RSPM (R 4.4.0)\n knitr     * 1.49       2024-11-08 [2] RSPM (R 4.4.0)\n leaflet   * 2.2.2      2024-03-26 [2] RSPM (R 4.4.0)\n plotly    * 4.10.4     2024-01-13 [2] RSPM (R 4.4.0)\n purrr     * 1.0.4      2025-02-05 [2] RSPM (R 4.4.0)\n quartabs  * 0.0.0.9000 2025-03-07 [1] local\n reactable * 0.4.4      2023-03-12 [2] RSPM (R 4.4.0)\n tibble    * 3.2.1      2023-03-20 [2] RSPM (R 4.4.2)\n tidyr     * 1.3.1      2024-01-24 [2] RSPM (R 4.4.0)\n tinytable * 0.7.0      2025-01-24 [2] RSPM (R 4.4.0)\n\n [1] /usr/local/lib/R/site-library\n [2] /usr/lib/R/site-library\n [3] /usr/lib/R/library\n * ── Packages attached to the search path.\n\n──────────────────────────────────────────────────────────────────────────────",
    "crumbs": [
      "Articles",
      "Walk through"
    ]
  },
  {
    "objectID": "NEWS.html",
    "href": "NEWS.html",
    "title": "quartabs 0.0.0.9000",
    "section": "",
    "text": "quartabs 0.0.0.9000\n\nInitial CRAN submission.",
    "crumbs": [
      "News"
    ]
  },
  {
    "objectID": "CODE_OF_CONDUCT.html",
    "href": "CODE_OF_CONDUCT.html",
    "title": "Contributor Covenant Code of Conduct",
    "section": "",
    "text": "We as members, contributors, and leaders pledge to make participation in our community a harassment-free experience for everyone, regardless of age, body size, visible or invisible disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, or sexual identity and orientation.\nWe pledge to act and interact in ways that contribute to an open, welcoming, diverse, inclusive, and healthy community.\n\n\n\nExamples of behavior that contributes to a positive environment for our community include:\n\nDemonstrating empathy and kindness toward other people\nBeing respectful of differing opinions, viewpoints, and experiences\nGiving and gracefully accepting constructive feedback\nAccepting responsibility and apologizing to those affected by our mistakes, and learning from the experience\nFocusing on what is best not just for us as individuals, but for the overall community\n\nExamples of unacceptable behavior include:\n\nThe use of sexualized language or imagery, and sexual attention or advances of any kind\nTrolling, insulting or derogatory comments, and personal or political attacks\nPublic or private harassment\nPublishing others’ private information, such as a physical or email address, without their explicit permission\nOther conduct which could reasonably be considered inappropriate in a professional setting\n\n\n\n\nCommunity leaders are responsible for clarifying and enforcing our standards of acceptable behavior and will take appropriate and fair corrective action in response to any behavior that they deem inappropriate, threatening, offensive, or harmful.\nCommunity leaders have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, and will communicate reasons for moderation decisions when appropriate.\n\n\n\nThis Code of Conduct applies within all community spaces, and also applies when an individual is officially representing the community in public spaces. Examples of representing our community include using an official e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event.\n\n\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be reported to the community leaders responsible for enforcement at sayuks.dev@gmail.com. All complaints will be reviewed and investigated promptly and fairly.\nAll community leaders are obligated to respect the privacy and security of the reporter of any incident.\n\n\n\nCommunity leaders will follow these Community Impact Guidelines in determining the consequences for any action they deem in violation of this Code of Conduct:\n\n\nCommunity Impact: Use of inappropriate language or other behavior deemed unprofessional or unwelcome in the community.\nConsequence: A private, written warning from community leaders, providing clarity around the nature of the violation and an explanation of why the behavior was inappropriate. A public apology may be requested.\n\n\n\nCommunity Impact: A violation through a single incident or series of actions.\nConsequence: A warning with consequences for continued behavior. No interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, for a specified period of time. This includes avoiding interactions in community spaces as well as external channels like social media. Violating these terms may lead to a temporary or permanent ban.\n\n\n\nCommunity Impact: A serious violation of community standards, including sustained inappropriate behavior.\nConsequence: A temporary ban from any sort of interaction or public communication with the community for a specified period of time. No public or private interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, is allowed during this period. Violating these terms may lead to a permanent ban.\n\n\n\nCommunity Impact: Demonstrating a pattern of violation of community standards, including sustained inappropriate behavior, harassment of an individual, or aggression toward or disparagement of classes of individuals.\nConsequence: A permanent ban from any sort of public interaction within the community.\n\n\n\n\nThis Code of Conduct is adapted from the Contributor Covenant, version 2.1, available at https://www.contributor-covenant.org/version/2/1/code_of_conduct.html.\nCommunity Impact Guidelines were inspired by [Mozilla’s code of conduct enforcement ladder][https://github.com/mozilla/inclusion].\nFor answers to common questions about this code of conduct, see the FAQ at https://www.contributor-covenant.org/faq. Translations are available at https://www.contributor-covenant.org/translations."
  },
  {
    "objectID": "CODE_OF_CONDUCT.html#our-pledge",
    "href": "CODE_OF_CONDUCT.html#our-pledge",
    "title": "Contributor Covenant Code of Conduct",
    "section": "",
    "text": "We as members, contributors, and leaders pledge to make participation in our community a harassment-free experience for everyone, regardless of age, body size, visible or invisible disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, or sexual identity and orientation.\nWe pledge to act and interact in ways that contribute to an open, welcoming, diverse, inclusive, and healthy community."
  },
  {
    "objectID": "CODE_OF_CONDUCT.html#our-standards",
    "href": "CODE_OF_CONDUCT.html#our-standards",
    "title": "Contributor Covenant Code of Conduct",
    "section": "",
    "text": "Examples of behavior that contributes to a positive environment for our community include:\n\nDemonstrating empathy and kindness toward other people\nBeing respectful of differing opinions, viewpoints, and experiences\nGiving and gracefully accepting constructive feedback\nAccepting responsibility and apologizing to those affected by our mistakes, and learning from the experience\nFocusing on what is best not just for us as individuals, but for the overall community\n\nExamples of unacceptable behavior include:\n\nThe use of sexualized language or imagery, and sexual attention or advances of any kind\nTrolling, insulting or derogatory comments, and personal or political attacks\nPublic or private harassment\nPublishing others’ private information, such as a physical or email address, without their explicit permission\nOther conduct which could reasonably be considered inappropriate in a professional setting"
  },
  {
    "objectID": "CODE_OF_CONDUCT.html#enforcement-responsibilities",
    "href": "CODE_OF_CONDUCT.html#enforcement-responsibilities",
    "title": "Contributor Covenant Code of Conduct",
    "section": "",
    "text": "Community leaders are responsible for clarifying and enforcing our standards of acceptable behavior and will take appropriate and fair corrective action in response to any behavior that they deem inappropriate, threatening, offensive, or harmful.\nCommunity leaders have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, and will communicate reasons for moderation decisions when appropriate."
  },
  {
    "objectID": "CODE_OF_CONDUCT.html#scope",
    "href": "CODE_OF_CONDUCT.html#scope",
    "title": "Contributor Covenant Code of Conduct",
    "section": "",
    "text": "This Code of Conduct applies within all community spaces, and also applies when an individual is officially representing the community in public spaces. Examples of representing our community include using an official e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event."
  },
  {
    "objectID": "CODE_OF_CONDUCT.html#enforcement",
    "href": "CODE_OF_CONDUCT.html#enforcement",
    "title": "Contributor Covenant Code of Conduct",
    "section": "",
    "text": "Instances of abusive, harassing, or otherwise unacceptable behavior may be reported to the community leaders responsible for enforcement at sayuks.dev@gmail.com. All complaints will be reviewed and investigated promptly and fairly.\nAll community leaders are obligated to respect the privacy and security of the reporter of any incident."
  },
  {
    "objectID": "CODE_OF_CONDUCT.html#enforcement-guidelines",
    "href": "CODE_OF_CONDUCT.html#enforcement-guidelines",
    "title": "Contributor Covenant Code of Conduct",
    "section": "",
    "text": "Community leaders will follow these Community Impact Guidelines in determining the consequences for any action they deem in violation of this Code of Conduct:\n\n\nCommunity Impact: Use of inappropriate language or other behavior deemed unprofessional or unwelcome in the community.\nConsequence: A private, written warning from community leaders, providing clarity around the nature of the violation and an explanation of why the behavior was inappropriate. A public apology may be requested.\n\n\n\nCommunity Impact: A violation through a single incident or series of actions.\nConsequence: A warning with consequences for continued behavior. No interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, for a specified period of time. This includes avoiding interactions in community spaces as well as external channels like social media. Violating these terms may lead to a temporary or permanent ban.\n\n\n\nCommunity Impact: A serious violation of community standards, including sustained inappropriate behavior.\nConsequence: A temporary ban from any sort of interaction or public communication with the community for a specified period of time. No public or private interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, is allowed during this period. Violating these terms may lead to a permanent ban.\n\n\n\nCommunity Impact: Demonstrating a pattern of violation of community standards, including sustained inappropriate behavior, harassment of an individual, or aggression toward or disparagement of classes of individuals.\nConsequence: A permanent ban from any sort of public interaction within the community."
  },
  {
    "objectID": "CODE_OF_CONDUCT.html#attribution",
    "href": "CODE_OF_CONDUCT.html#attribution",
    "title": "Contributor Covenant Code of Conduct",
    "section": "",
    "text": "This Code of Conduct is adapted from the Contributor Covenant, version 2.1, available at https://www.contributor-covenant.org/version/2/1/code_of_conduct.html.\nCommunity Impact Guidelines were inspired by [Mozilla’s code of conduct enforcement ladder][https://github.com/mozilla/inclusion].\nFor answers to common questions about this code of conduct, see the FAQ at https://www.contributor-covenant.org/faq. Translations are available at https://www.contributor-covenant.org/translations."
  },
  {
    "objectID": "CITATION.html",
    "href": "CITATION.html",
    "title": "Citation",
    "section": "",
    "text": "Citation\nTo cite package ‘quartabs’ in publications use:\n\nSasaki Y (????). quartabs: Dynamically Generate Tabset Panels in a ‘Quarto’ HTML Document. R package version 0.0.0.9000, https://github.com/sayuks/quartabs."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "quartabs",
    "section": "",
    "text": "Dynamically Generate Tabset Panels in a Quarto HTML Document.\n\n\ninstall.packages(\"quartabs\")\nYou can install the development version of quartabs from GitHub with:\n# install.packages(\"pak\")\npak::pak(\"sayuks/quartabs\")\n\n\n\nrender_tabset() takes a data frame as input and outputs the markdown of the tabset.\nIn the actual .qmd file, specify the chunk option results: asis.\nlibrary(quartabs)\n\ndata.frame(\n  tab = c(\"A\", \"B\"),\n  value = c(\"Tab content for A\", \"Tab content for B\")\n) |&gt;\n  render_tabset(tab, value)\n#&gt; ::: {.panel-tabset}\n#&gt; \n#&gt; # A\n#&gt; \n#&gt; Tab content for A\n#&gt; \n#&gt; # B\n#&gt; \n#&gt; Tab content for B\n#&gt; \n#&gt; :::\nSee Walk through for details.\n\n\n\nPlease note that the quartabs project is released with a Contributor Code of Conduct. By contributing to this project, you agree to abide by its terms.",
    "crumbs": [
      "Home"
    ]
  },
  {
    "objectID": "index.html#installation",
    "href": "index.html#installation",
    "title": "quartabs",
    "section": "",
    "text": "install.packages(\"quartabs\")\nYou can install the development version of quartabs from GitHub with:\n# install.packages(\"pak\")\npak::pak(\"sayuks/quartabs\")",
    "crumbs": [
      "Home"
    ]
  },
  {
    "objectID": "index.html#examples",
    "href": "index.html#examples",
    "title": "quartabs",
    "section": "",
    "text": "render_tabset() takes a data frame as input and outputs the markdown of the tabset.\nIn the actual .qmd file, specify the chunk option results: asis.\nlibrary(quartabs)\n\ndata.frame(\n  tab = c(\"A\", \"B\"),\n  value = c(\"Tab content for A\", \"Tab content for B\")\n) |&gt;\n  render_tabset(tab, value)\n#&gt; ::: {.panel-tabset}\n#&gt; \n#&gt; # A\n#&gt; \n#&gt; Tab content for A\n#&gt; \n#&gt; # B\n#&gt; \n#&gt; Tab content for B\n#&gt; \n#&gt; :::\nSee Walk through for details.",
    "crumbs": [
      "Home"
    ]
  },
  {
    "objectID": "index.html#code-of-conduct",
    "href": "index.html#code-of-conduct",
    "title": "quartabs",
    "section": "",
    "text": "Please note that the quartabs project is released with a Contributor Code of Conduct. By contributing to this project, you agree to abide by its terms.",
    "crumbs": [
      "Home"
    ]
  },
  {
    "objectID": "LICENSE.html",
    "href": "LICENSE.html",
    "title": "MIT License",
    "section": "",
    "text": "MIT License\nCopyright (c) 2025 quartabs authors\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the “Software”), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.",
    "crumbs": [
      "License"
    ]
  },
  {
    "objectID": "man/render_tabset.html",
    "href": "man/render_tabset.html",
    "title": "quartabs",
    "section": "",
    "text": "The function takes in a data frame and produces tabset panels for each unique combination of the tabset variables. Only works with Quarto HTML documents.\n\n\n\nrender_tabset(\n  data,\n  tabset_vars,\n  output_vars,\n  layout = NULL,\n  heading_levels = NULL,\n  pills = FALSE,\n  tabset_width = \"default\"\n)\n\n\n\n\n\n\n\ndata\n\n\nA data frame.\n\n\n\n\ntabset_vars\n\n\nColumns to use as tabset labels. Internally passed to the select argument of subset(). Accepts raw column names, strings, numbers and logical values.\n\n\n\n\noutput_vars\n\n\nColumns to display in each tabset panel. Internally passed to the select argument of subset(). Accepts raw column names, strings, numbers and logical values.\n\n\n\n\nlayout\n\n\nNULL or a character vector of length 1 for specifying layout in tabset panel. If not NULL, layout must begin with at least three or more repetitions of \":\" (e.g. \":::\"). Closing div (e.g. \":::\") is inserted automatically. See for details: https://quarto.org/docs/authoring/figures.html.\n\n\n\n\nheading_levels\n\n\nNULL or a vector consisting of natural numbers and missing values. The length is equal to the number of columns specified in tabset_vars. This controls whether it is partially (or entirely) displayed as normal header instead of tabset.\n\n\nIf heading_levels is a NULL, all output is tabset.\n\n\nIf heading_levels is a vector of positive natural number, the elements of the vector correspond to the columns specified in tabset_vars.\n\n\nIf the element is integer, the tabset column is displayed as headers with their level, not tabset. (e.g. 2 means h2 header). Levels 1 to 6 are recommended. The reason is that quarto supports headers up to 6. 7 and above will also work, but they are displayed as normal text. In addition, considering the chapter format, it is preferable to gradually increase the level, as in 1, 2 and 3.\n\n\nIf the element is NA, tabset is displayed.\n\n\n\n\n\n\n\n\npills\n\n\nLogical, use pills or not. See https://getbootstrap.com/docs/5.2/components/navs-tabs/#pills for details. If heading_levels is specified, this will be ignored.\n\n\n\n\ntabset_width\n\n\nCharacter, one of \"default\", \"fill\" and \"justified\". See https://getbootstrap.com/docs/5.2/components/navs-tabs/#fill-and-justify for details. If heading_levels is specified, this will be ignored.\n\n\n\n\n\n\n\n\nWrite #| results: asis at the beginning of the chunk or results=‘asis’ in the chunk options.\n\n\nThe data is sorted internally in the order of tabset_vars. Define the order beforehand, e.g. using factor.\n\n\nIf multiple tabset_vars are given, create nested tabsets.\n\n\nFor columns specified in output_vars, columns of type list are output with print() and normal columns are output with cat()\n\n\nIf tabset_vars or output_vars have \"factor\", \"Date\" and \"POSIXt\" columns, they are converted internally to character. This is to prevent it being displayed as numeric when cat() is executed.\n\n\n\n\n\nNULL invisibly. This function is called for its side effect.\n\n\n\n\n\nlayout is intended for simplified use cases and complex layouts may not work.\n\n\nWhen outputting tables or figures that use JavaScript (such as {plotly}, {leaflet}, {DT}, {reactable}, etc.), it seems JavaScript dependencies need to be resolved. A simple solution is to wrap the output in htmltools::div() and create a dummy plot in another chunk. See the Walk through for details.\n\n\nIf a column of type list contains a named vector or list, the values may not display well.\n\n\nWhen tabset_vars and output_vars have the following columns, they may not display well:\n\n\nA column of type list contains a named vector or list (This is for output_vars. tabset_vars must not contain list columns).\n\n\nClasses with their own printing methods, such as \"difftime\", \"ts\", .etc.\n\n\n\n\n\n\n\nAs this function is focused on quickly and dynamically generating tabsets and chunks, it is difficult to customize it on a chunk-by-chunk basis. The regular way to dynamically create chunks is to use functions such as knitr::knit(), knitr::knit_child(), knitr::knit_expand(), etc. For more information on these, see the following links.\n\n\nHeiss, Andrew. 2024. “Guide to Generating and Rendering Computational Markdown Content Programmatically with Quarto.” November 4, 2024. doi:https://doi.org/10.59350/pa44j-cc302.\n\n\nhttps://bookdown.org/yihui/rmarkdown-cookbook/child-document.html#child-document\n\n\nhttps://bookdown.org/yihui/rmarkdown-cookbook/knit-expand.html\n\n\n\n\n\n\nlibrary(\"quartabs\")\n\n# sample data\ndf &lt;- data.frame(\n  group1 = c(rep(\"A\", 3), rep(\"B\", 3)),\n  group2 = rep(c(\"X\", \"Y\", \"Z\"), 2),\n  value1 = 1:6,\n  value2 = letters[1:6]\n)\n\n# Here are examples of the output before it is converted to tabset.\n# If you want it to actually work, in the .qmd file,\n# set `results='asis'` in the chunk options or\n# write `#| results: asis` at the beginning of the chunk.\n\n# Basic usage\nrender_tabset(df, group1, value1)\n\n::: {.panel-tabset}\n\n# A\n\n1\n\n# A\n\n2\n\n# A\n\n3\n\n# B\n\n4\n\n# B\n\n5\n\n# B\n\n6\n\n:::\n\n# Nested tabset, two outputs side by side with a width of 1:1\nrender_tabset(\n  df,\n  c(group1, group2),\n  c(value1, value2),\n  layout = \"::: {layout-ncol=2}\"\n)\n\n::: {.panel-tabset}\n\n# A\n\n::: {.panel-tabset}\n\n## X\n\n::: {layout-ncol=2}\n\n1\n\na\n\n:::\n\n## Y\n\n::: {layout-ncol=2}\n\n2\n\nb\n\n:::\n\n## Z\n\n::: {layout-ncol=2}\n\n3\n\nc\n\n:::\n\n:::\n\n# B\n\n::: {.panel-tabset}\n\n## X\n\n::: {layout-ncol=2}\n\n4\n\nd\n\n:::\n\n## Y\n\n::: {layout-ncol=2}\n\n5\n\ne\n\n:::\n\n## Z\n\n::: {layout-ncol=2}\n\n6\n\nf\n\n:::\n\n:::\n\n:::\n\n# Use heading instead of tabset\nrender_tabset(\n  df,\n  c(group1, group2),\n  value1,\n  heading_levels = c(2, 3)\n)\n\n## A\n\n### X\n\n1\n\n### Y\n\n2\n\n### Z\n\n3\n\n## B\n\n### X\n\n4\n\n### Y\n\n5\n\n### Z\n\n6",
    "crumbs": [
      "Reference",
      "render_tabset"
    ]
  },
  {
    "objectID": "man/render_tabset.html#create-tabset-panels-in-quarto",
    "href": "man/render_tabset.html#create-tabset-panels-in-quarto",
    "title": "quartabs",
    "section": "",
    "text": "The function takes in a data frame and produces tabset panels for each unique combination of the tabset variables. Only works with Quarto HTML documents.\n\n\n\nrender_tabset(\n  data,\n  tabset_vars,\n  output_vars,\n  layout = NULL,\n  heading_levels = NULL,\n  pills = FALSE,\n  tabset_width = \"default\"\n)\n\n\n\n\n\n\n\ndata\n\n\nA data frame.\n\n\n\n\ntabset_vars\n\n\nColumns to use as tabset labels. Internally passed to the select argument of subset(). Accepts raw column names, strings, numbers and logical values.\n\n\n\n\noutput_vars\n\n\nColumns to display in each tabset panel. Internally passed to the select argument of subset(). Accepts raw column names, strings, numbers and logical values.\n\n\n\n\nlayout\n\n\nNULL or a character vector of length 1 for specifying layout in tabset panel. If not NULL, layout must begin with at least three or more repetitions of \":\" (e.g. \":::\"). Closing div (e.g. \":::\") is inserted automatically. See for details: https://quarto.org/docs/authoring/figures.html.\n\n\n\n\nheading_levels\n\n\nNULL or a vector consisting of natural numbers and missing values. The length is equal to the number of columns specified in tabset_vars. This controls whether it is partially (or entirely) displayed as normal header instead of tabset.\n\n\nIf heading_levels is a NULL, all output is tabset.\n\n\nIf heading_levels is a vector of positive natural number, the elements of the vector correspond to the columns specified in tabset_vars.\n\n\nIf the element is integer, the tabset column is displayed as headers with their level, not tabset. (e.g. 2 means h2 header). Levels 1 to 6 are recommended. The reason is that quarto supports headers up to 6. 7 and above will also work, but they are displayed as normal text. In addition, considering the chapter format, it is preferable to gradually increase the level, as in 1, 2 and 3.\n\n\nIf the element is NA, tabset is displayed.\n\n\n\n\n\n\n\n\npills\n\n\nLogical, use pills or not. See https://getbootstrap.com/docs/5.2/components/navs-tabs/#pills for details. If heading_levels is specified, this will be ignored.\n\n\n\n\ntabset_width\n\n\nCharacter, one of \"default\", \"fill\" and \"justified\". See https://getbootstrap.com/docs/5.2/components/navs-tabs/#fill-and-justify for details. If heading_levels is specified, this will be ignored.\n\n\n\n\n\n\n\n\nWrite #| results: asis at the beginning of the chunk or results=‘asis’ in the chunk options.\n\n\nThe data is sorted internally in the order of tabset_vars. Define the order beforehand, e.g. using factor.\n\n\nIf multiple tabset_vars are given, create nested tabsets.\n\n\nFor columns specified in output_vars, columns of type list are output with print() and normal columns are output with cat()\n\n\nIf tabset_vars or output_vars have \"factor\", \"Date\" and \"POSIXt\" columns, they are converted internally to character. This is to prevent it being displayed as numeric when cat() is executed.\n\n\n\n\n\nNULL invisibly. This function is called for its side effect.\n\n\n\n\n\nlayout is intended for simplified use cases and complex layouts may not work.\n\n\nWhen outputting tables or figures that use JavaScript (such as {plotly}, {leaflet}, {DT}, {reactable}, etc.), it seems JavaScript dependencies need to be resolved. A simple solution is to wrap the output in htmltools::div() and create a dummy plot in another chunk. See the Walk through for details.\n\n\nIf a column of type list contains a named vector or list, the values may not display well.\n\n\nWhen tabset_vars and output_vars have the following columns, they may not display well:\n\n\nA column of type list contains a named vector or list (This is for output_vars. tabset_vars must not contain list columns).\n\n\nClasses with their own printing methods, such as \"difftime\", \"ts\", .etc.\n\n\n\n\n\n\n\nAs this function is focused on quickly and dynamically generating tabsets and chunks, it is difficult to customize it on a chunk-by-chunk basis. The regular way to dynamically create chunks is to use functions such as knitr::knit(), knitr::knit_child(), knitr::knit_expand(), etc. For more information on these, see the following links.\n\n\nHeiss, Andrew. 2024. “Guide to Generating and Rendering Computational Markdown Content Programmatically with Quarto.” November 4, 2024. doi:https://doi.org/10.59350/pa44j-cc302.\n\n\nhttps://bookdown.org/yihui/rmarkdown-cookbook/child-document.html#child-document\n\n\nhttps://bookdown.org/yihui/rmarkdown-cookbook/knit-expand.html\n\n\n\n\n\n\nlibrary(\"quartabs\")\n\n# sample data\ndf &lt;- data.frame(\n  group1 = c(rep(\"A\", 3), rep(\"B\", 3)),\n  group2 = rep(c(\"X\", \"Y\", \"Z\"), 2),\n  value1 = 1:6,\n  value2 = letters[1:6]\n)\n\n# Here are examples of the output before it is converted to tabset.\n# If you want it to actually work, in the .qmd file,\n# set `results='asis'` in the chunk options or\n# write `#| results: asis` at the beginning of the chunk.\n\n# Basic usage\nrender_tabset(df, group1, value1)\n\n::: {.panel-tabset}\n\n# A\n\n1\n\n# A\n\n2\n\n# A\n\n3\n\n# B\n\n4\n\n# B\n\n5\n\n# B\n\n6\n\n:::\n\n# Nested tabset, two outputs side by side with a width of 1:1\nrender_tabset(\n  df,\n  c(group1, group2),\n  c(value1, value2),\n  layout = \"::: {layout-ncol=2}\"\n)\n\n::: {.panel-tabset}\n\n# A\n\n::: {.panel-tabset}\n\n## X\n\n::: {layout-ncol=2}\n\n1\n\na\n\n:::\n\n## Y\n\n::: {layout-ncol=2}\n\n2\n\nb\n\n:::\n\n## Z\n\n::: {layout-ncol=2}\n\n3\n\nc\n\n:::\n\n:::\n\n# B\n\n::: {.panel-tabset}\n\n## X\n\n::: {layout-ncol=2}\n\n4\n\nd\n\n:::\n\n## Y\n\n::: {layout-ncol=2}\n\n5\n\ne\n\n:::\n\n## Z\n\n::: {layout-ncol=2}\n\n6\n\nf\n\n:::\n\n:::\n\n:::\n\n# Use heading instead of tabset\nrender_tabset(\n  df,\n  c(group1, group2),\n  value1,\n  heading_levels = c(2, 3)\n)\n\n## A\n\n### X\n\n1\n\n### Y\n\n2\n\n### Z\n\n3\n\n## B\n\n### X\n\n4\n\n### Y\n\n5\n\n### Z\n\n6",
    "crumbs": [
      "Reference",
      "render_tabset"
    ]
  }
]