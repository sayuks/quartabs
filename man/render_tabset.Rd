% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/render_tabset.R
\name{render_tabset}
\alias{render_tabset}
\title{Create tabset panels in quarto}
\usage{
render_tabset(
  data,
  tabset_vars,
  output_vars,
  layout = NULL,
  heading_levels = NULL,
  pills = FALSE,
  tabset_width = "default"
)
}
\arguments{
\item{data}{A data frame.}

\item{tabset_vars}{Columns to use as tabset labels. Internally passed to the \code{select} argument
of \code{\link[=subset]{subset()}}. Accepts raw column names, strings, numbers and logical values.}

\item{output_vars}{Columns to display in each tabset panel. Internally passed to the \code{select}
argument of \code{\link[=subset]{subset()}}. Accepts raw column names, strings, numbers and
logical values.}

\item{layout}{\code{NULL} or a character vector of length 1 for specifying layout
in tabset panel. If not \code{NULL}, \code{layout} must begin with at least three
or more repetitions of ":" (e.g. ":::").}

\item{heading_levels}{\code{NULL} or a vector consisting of natural numbers
and missing values. The length is equal to the number of columns specified
in \code{tabset_vars}. This controls whether it is partially (or entirely)
displayed as normal header instead of tabset.
\itemize{
\item If \code{NULL}, all output is tabset.
\item If a positive integer-ish numeric vector, the elements of the vector
correspond to the columns specified in \code{tabset_vars}.
\itemize{
\item If the element is integer, the tabset column is displayed as headers
with their level, not tabset. (e.g. 2 means h2 header).
Levels 1 to 6 are recommended. The reason is that quarto supports headers
up to 6. 7 and above will also work, but they are displayed as normal
text. In addition, considering the chapter format,
it is preferable to gradually increase the level, as in 1, 2 and 3.
\item If the element is NA, tabset is displayed.
}
}}

\item{pills}{Logical, use pills or not.
See \url{https://getbootstrap.com/docs/5.2/components/navs-tabs/#pills}
for details. If \code{heading_levels} is specified, this will be ignored.}

\item{tabset_width}{Character, one of "default", "fill" and "justified".
See \url{https://getbootstrap.com/docs/5.2/components/navs-tabs/#pills}
for details. If \code{heading_levels} is specified, this will be ignored.}
}
\value{
\code{NULL} invisibly. This function is called for its side effect.
}
\description{
The function takes in a data frame or a tibble and produces
tabset panels for each unique combination of the tabset variables.
\emph{\strong{Only works with .qmd files in HTML format.}}
}
\details{
\itemize{
\item Write \verb{#| results: asis} at the beginning of the chunk or
\code{results='asis'} in the chunk options.
\item The \code{data} is sorted internally in the order of \code{tabset_vars}.
Define the order beforehand, e.g. using factor.
\item If multiple \code{tabset_vars} are given, create nested tabsets.
\item \code{output_vars} can also be figures or tables if \code{data} is a tibble.
\item If factor columns are included in output_vars, they are converted
internally to character.
\item For columns specified in output_vars, columns of type list are output with
\code{\link[=print]{print()}} and normal columns are output with \code{\link[=cat]{cat()}}
}
}
\section{Limitations}{

\itemize{
\item The function has an optional argument, \code{layout}, which allows for
the addition of layout option to the outputs
(see \url{https://quarto.org/docs/authoring/figures.html}).
However, this is intended for simplified use cases and
complex layouts may not work. See Examples for more details.
\item When outputting tables or figures that use JavaScript
(such as \code{{plotly}}, \code{{leaflet}}, \code{{DT}}, \code{{reactable}}, etc.),
it seems JavaScript dependencies need to be resolved.
A simple solution is to wrap the output in \code{\link[htmltools:builder]{htmltools::div()}}
and create a dummy plot in another chunk. See the demo page for details.
\item If a column of type list contains a named vector or list,
the values may not display well.
}
}

\examples{
# sample data
df <- data.frame(
  group1 = c(rep("A", 3), rep("B", 3)),
  group2 = rep(c("X", "Y", "Z"), 2),
  value1 = 1:6,
  value2 = letters[1:6]
)

# Here are examples of the output before it is converted to tabset.
# If you want it to actually work, in the .qmd file,
# set `results='asis'` in the chunk options or
# write `#| results: asis` at the beginning of the chunk.

# Basic usage
render_tabset(df, group1, value1)

# Nested tabset, two outputs side by side with a width of 1:1
render_tabset(
  df,
  c(group1, group2),
  c(value1, value2),
  layout = '::: {layout="[1, 1]"}'
)

# Use heading instead of tabset
render_tabset(
  df,
  c(group1, group2),
  value1,
  heading_levels = c(2, 3)
)
}
\references{
As this function is focused on quickly and dynamically generating tabsets
and chunks, it is difficult to customize it on a chunk-by-chunk basis.
The regular way to dynamically create chunks is to use functions such as
\code{\link[knitr:knit]{knitr::knit()}}, \code{\link[knitr:knit_child]{knitr::knit_child()}}, \code{\link[knitr:knit_expand]{knitr::knit_expand()}}, etc.
For more information on these, see the following links.
\itemize{
\item Heiss, Andrew. 2024. “Guide to Generating and Rendering Computational
Markdown Content Programmatically with Quarto.” November 4, 2024.
\doi{https://doi.org/10.59350/pa44j-cc302}.
\item \url{https://bookdown.org/yihui/rmarkdown-cookbook/child-document.html#child-document}
\item \url{https://bookdown.org/yihui/rmarkdown-cookbook/knit-expand.html}
}
}
